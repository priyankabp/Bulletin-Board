{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","save","remove","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","transform","concat","x","y","s","Math","ceil","random","textarea","_newText","focus","select","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","id","fa","onClick","Component","Board","notes","eachNote","update","add","nextId","self","count","fetch","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6a8a9d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaPencilAlt } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\nimport { FaSave } from 'react-icons/fa';\nimport * as FontAwesome from 'react-icons/fa'\n\nclass Note extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this);\n        this.save = this.save.bind(this);\n        this.remove = this.remove.bind(this);\n        this.renderForm = this.renderForm.bind(this);\n        this.renderDisplay = this.renderDisplay.bind(this);\n        this.randomBetween = this.randomBetween.bind(this);\n    }\n\n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            transform: `rotate(${this.randomBetween(-25, 25, 'deg')})`\n        }\n    }\n\n    randomBetween(x, y, s) {\n        return x + Math.ceil(Math.random() * (y - x)) + s\n    }\n\n    componentDidUpdate() {\n        var textarea\n        if (this.state.editing) {\n            textarea = this._newText\n            textarea.focus()\n            textarea.select()\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.children !== nextProps.children || this.state !== nextState\n        )\n\n    }\n\n    edit() {\n        this.setState({\n            editing: true\n        })\n    }\n\n    remove() {\n        this.props.onRemove(this.props.index);\n    }\n\n    save(e) {\n        e.preventDefault();\n        this.props.onChange(this._newText.value, this.props.index);\n        this.setState({\n            editing: false\n        })\n    }\n\n    renderForm() {\n        return (\n            <div className=\"note\" style={this.style}>\n                <form onSubmit={this.save}>\n                    <textarea ref={input => this._newText = input} defaultValue={this.props.children} />\n                    <button id=\"save\"><FaSave /></button>\n                </form>\n            </div>\n        )\n    }\n\n    renderDisplay() {\n        return (\n            <div className=\"note\" style={this.style}>\n                <p>{this.props.children}</p>\n                <span>\n                    <button onClick={this.edit} id=\"edit\"><FaPencilAlt /></button>\n                    <button onClick={this.remove} id=\"remove\"><FaTrash /></button>\n                </span>\n            </div>\n        )\n    }\n\n    render() {\n        return this.state.editing ? this.renderForm() : this.renderDisplay();\n        // if (this.state.editing) {\n        //     return this.renderForm();\n        // }\n        // else {\n        //     return this.renderDisplay();\n        // }\n    }\n}\n\nexport default Note","import React, { Component } from 'react';\nimport Note from './Note';\nimport { FaPlus } from 'react-icons/fa';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: []\n        }\n        this.eachNote = this.eachNote.bind(this);\n        this.update = this.update.bind(this);\n        this.remove = this.remove.bind(this);\n        this.add = this.add.bind(this);\n        this.nextId = this.nextId.bind(this);\n    }\n\n    componentWillMount() {\n        var self = this\n        if (this.props.count) {\n            fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n                .then(response => response.json())\n                .then(json => json[0]\n                    .split('. ')\n                    .forEach(sentence => self.add(sentence.substring(0, 25))))\n        }\n    }\n\n    add(text) {\n        this.setState(prevState => ({\n            notes: [\n                ...prevState.notes,\n                {\n                    id: this.nextId(),\n                    note: text\n                }\n            ]\n        }))\n    }\n\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n\n    update(newText, i) {\n        console.log(newText);\n        this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : { ...note, note: newText }\n            )\n        }))\n    }\n\n    remove(id) {\n        console.log(\"removing item\", id);\n        this.setState(prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id)\n        }))\n    }\n\n    eachNote(note, i) {\n        return (\n            <Note key={note.id}\n                index={note.id}\n                onChange={this.update}\n                onRemove={this.remove}>\n                {note.note}\n            </Note>\n        )\n    }\n    render() {\n        return (\n            <div className=\"board\">\n                {this.state.notes.map(this.eachNote)}\n                <button onClick={this.add.bind(null, \"New Note\")}\n                    id=\"add\">\n                    <FaPlus />\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Board;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}